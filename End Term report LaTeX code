\documentclass{article}
\usepackage{graphicx} % Required for inserting images
\usepackage{hyperref}
\title{Numerical Analysis End term Report}
\author{By:Pranav Kulkarni(22B0642) Mentored by: Himanshu Raj}
\date{July 2023}

\begin{document}

\maketitle

\section*{Introduction}
This is the end-term report for my topic Numerical analysis. The numerical analysis methods are based on heavy calculations which are hard for humans , so we need computers to do those heavy calculations.This can be done using programming languages.As mentioned in my midterm PoA, I will majorly focus on applications of Numerical Analysis using languages C++ and Python. There are various resources from youtube as well as various websites I used to make this report.
\section*{Numerical Analysis Programming in C++}

\subsection*{Bisection method in C++}
I have already discussed algorithm of the bisection method in my mid-term report. So we will take a straightaway example to discuss the program.
$$f(x)=x^3-x^2+2$$
We have to find the root for this equation. So let us take a= -500 and b=100.
So the C++ program look like : \\
\begin{verbatim}
    #include <iostream>
using namespace std;
#define EP 0.01
// An example function whose solution is determined using
// Bisection Method. The function is x^3 - x^2 + 2
double solution(double x) {
   return x*x*x - x*x + 2;
}
// Prints root of solution(x) with error in EPSILON
void bisection(double a, double b) {
   if (solution(a) * solution(b) >= 0) {
      cout << "You have not assumed right a and b\n";
      return;
   }
   double c = a;
   while ((b-a) >= EP) {
      // Find middle point
      c = (a+b)/2;
      // Check if middle point is root
      if (solution(c) == 0.0)
         break;
       // Decide the side to repeat the steps
      else if (solution(c)*solution(a) < 0)
         b = c;
      else
         a = c;
   }
   cout << "The value of root is : " << c;
}
 // main function
int main() {
   double a =-500, b = 100;
   bisection(a, b);
   return 0;
}
\end{verbatim}
Output of this code comes out to be -0.991821.This is our solution for the question using bisection method.
\subsection*{Regula Falsi method }
n this C++ program, $x_0$ and $x_1$ are two initial guesses, e is tolerable error and f(x) is non-linear equation whose root is being obtained using Regula Falsi method.:\\
Here let us take f(x)=cos(x) - x * exp(x)\\
\begin{verbatim}
#include<iostream>
#include<iomanip>
#include<math.h>

/*
 Defining equation to be solved.
 Change this equation to solve another problem.
*/

#define f(x) cos(x) - x * exp(x)

using namespace std;

int main()
{
	 /* Declaring required variables */
	 float x0, x1, x, f0, f1, f, e;
	 int step = 1;

	 /* Setting precision and writing floating point values in fixed-point notation. */
     cout<< setprecision(6)<< fixed;

	 /* Inputs */
	 up:
	 cout<<"Enter first guess: ";
     cin>>x0;
     cout<<"Enter second guess: ";
     cin>>x1;
     cout<<"Enter tolerable error: ";
     cin>>e;

	 /* Calculating Functional Value */
	 f0 = f(x0);
	 f1 = f(x1);

	 /* Checking whether given guesses brackets the root or not. */
	 if( f0 * f1 > 0.0)
	 {
		  cout<<"Incorrect Initial Guesses."<< endl;
		  goto up;
	 }
   /* Implementing False Position Method */
     cout<< endl<<"*********************"<< endl;
	 cout<<"False Position Method"<< endl;
	 cout<<"*********************"<< endl;
	 do
	 {
		  /* Applying False Position Method */
		  /* x is next approximated root using False Position method */
		  x = x0 - (x0-x1) * f0/ (f0-f1);
		  f = f(x);

		  cout<<"Iteration-"<< step<<":\t x = "<< setw(10)<< x<<" and f(x) = "<< setw(10)<< f(x)<< endl;

		  if( f0 * f < 0)
		  {
			   x1 = x;
			   f1 = f;
		  }
		  else
		  {
			   x0 = x;
			   f0 = f;
		  }
		  step = step + 1;
	 }while(fabs(f)>e);

	 cout<< endl<<"Root is: "<< x<< endl;

	 return 0;
\end{verbatim}
and the output comes out as \\
\begin{verbatim}
    Iteration-1:     x =   0.314665 and f(x) =   0.519871
Iteration-2:     x =   0.446728 and f(x) =   0.203545
Iteration-3:     x =   0.494015 and f(x) =   0.070802
Iteration-4:     x =   0.509946 and f(x) =   0.023608
Iteration-5:     x =   0.515201 and f(x) =   0.007760
Iteration-6:     x =   0.516922 and f(x) =   0.002539
Iteration-7:     x =   0.517485 and f(x) =   0.000829
Iteration-8:     x =   0.517668 and f(x) =   0.000271
Iteration-9:     x =   0.517728 and f(x) =   0.000088
Iteration-10:    x =   0.517748 and f(x) =   0.000029
Iteration-11:    x =   0.517754 and f(x) =   0.000009

Root is: 0.517754

\end{verbatim}
\subsection*{Secant method }
This was the first open domain method discussed. n this C++ program, $x_0$ and $x_1$ are two initial guesses, e is tolerable error and f(x) is non-linear equation whose root is being obtained using Regula Falsi method.:\\
Let f(x)=x^3-2x-5  and $x_0=0$ and $x_1=1$
\begin{verbatim}
    #include<iostream>
#include<iomanip>
#include<math.h>
#include<stdlib.h>

/* Defining equation to be solved.
   Change this equation to solve another problem. */
#define    f(x)    x*x*x - 2*x - 5

using namespace std;

int main()
{
	 float x0, x1, x2, f0, f1, f2, e;
	 int step = 1, N;
	 
	 /* Setting precision and writing floating point values in fixed-point notation. */
   cout<< setprecision(6)<< fixed;

	 /* Inputs */
	 cout<<"Enter first guess: ";
	 cin>>x0;
	 cout<<"Enter second guess: ";
	 cin>>x1;
	 cout<<"Enter tolerable error: ";
	 cin>>e;
	 cout<<"Enter maximum iteration: ";
	 cin>>N;

	 /* Implementing Secant Method */
     cout<< endl<<"**************"<< endl;
	 cout<<"Secant Method"<< endl;
	 cout<<"**************"<< endl;
	 do
	 {
		  f0 = f(x0);
		  f1 = f(x1);
		  if(f0 == f1)
		  {
			   cout<<"Mathematical Error.";
			   exit(0);
		  }

		  x2 = x1 - (x1 - x0) * f1/(f1-f0);
		  f2 = f(x2);

		  cout<<"Iteration-"<< step<<":\t x2 = "<< setw(10)<< x2<<" and f(x2) = "<< setw(10)<< f(x2)<< endl;

		  x0 = x1;
		  f0 = f1;
		  x1 = x2;
		  f1 = f2;

		  step = step + 1;

		  if(step > N)
		  {
			   cout<<"Not Convergent.";
			   exit(0);
		  }
	 }while(fabs(f2)>e);

	 cout<< endl<<"Root is: "<< x2;

	 return 0;
}
\end{verbatim}
and the output sequence we get is 
\begin{verbatim}
    Iteration-1:     x2 =  -5.000000 and f(x2) = -120.000000
Iteration-2:     x2 =   1.315789 and f(x2) =  -5.353550
Iteration-3:     x2 =   1.610713 and f(x2) =  -4.042600
Iteration-4:     x2 =   2.520173 and f(x2) =   5.965955
Iteration-5:     x2 =   1.978057 and f(x2) =  -1.216554
Iteration-6:     x2 =   2.069879 and f(x2) =  -0.271572
Iteration-7:     x2 =   2.096267 and f(x2) =   0.019166
Iteration-8:     x2 =   2.094527 and f(x2) =  -0.000268
Iteration-9:     x2 =   2.094552 and f(x2) =   0.000001

Root is: 2.094552
\end{verbatim}
\subsection*{Newton Raphson method}
Let $$f(x)=x^3-x^2+2$$
\begin{verbatim}
    // C++ program for implementation of Newton Raphson Method for
// solving equations
#include<bits/stdc++.h>
#define EPSILON 0.001
using namespace std;

// An example function whose solution is determined using
// Bisection Method. The function is x^3 - x^2 + 2
double func(double x)
{
	return x*x*x - x*x + 2;
}

// Derivative of the above function which is 3*x^x - 2*x
double derivFunc(double x)
{
	return 3*x*x - 2*x;
}

// Function to find the root
void newtonRaphson(double x)
{
	double h = func(x) / derivFunc(x);
	while (abs(h) >= EPSILON)
	{
		h = func(x)/derivFunc(x);

		// x(i+1) = x(i) - f(x) / f'(x)
		x = x - h;
	}

	cout << "The value of the root is : " << x;
}

// Driver program to test above
int main()
{
	double x0 = -20; // Initial values assumed
	newtonRaphson(x0);
	return 0;
}

\end{verbatim}
We get root as -1.
\subsection*{Trapezoidal Rule for Approximate Value of Definite Integral}
The trapezoidal rule is a tool used in numerical analysis to approximate definite integrals. The core concept of the trapezoidal rule is to compute the size of the region that lies beneath the graph of the given function on the assumption that it is a trapezium. 
$$\int_{a}^{b} f(x)= (b-a) \frac{f(a)+f(b)}{2}$$
segment size can be taken as $\frac{b-a}{n}$
\begin{verbatim}
    // C++ program to implement Trapezoidal rule
#include<stdio.h>

// A sample function whose definite integral's
// approximate value is computed using Trapezoidal
// rule
float y(float x)
{
	// Declaring the function f(x) = 1/(1+x*x)
	return 1/(1+x*x);
}

// Function to evaluate the value of integral
float trapezoidal(float a, float b, float n)
{
	// Grid spacing
	float h = (b-a)/n;

	// Computing sum of first and last terms
	// in above formula
	float s = y(a)+y(b);

	// Adding middle terms in above formula
	for (int i = 1; i < n; i++)
		s += 2*y(a+i*h);

	// h/2 indicates (b-a)/2n. Multiplying h/2
	// with s.
	return (h/2)*s;
}

// Driver program to test above function
int main()
{
	// Range of definite integral
	float x0 = 0;
	float xn = 1;

	// Number of grids. Higher value means
	// more accuracy
	int n = 6;

	printf("Value of integral is %6.4f\n",
				trapezoidal(x0, xn, n));
	return 0;
}

\end{verbatim}
\subsection*{Simpson's rule}
As seen previously we have $$I(f)=(b-a)/6\{f(a)+4f(\frac{a+b}{2}) + f(b)\}
$$
and $ME_s=I(f)-I(p_2)$
$$ME_s(f)=-\frac{f''''(\eta)(b-a)^5}{2880}$$
\begin{verbatim}
Evaluate logx dx within limit 4 to 5.2.

First we will divide interval into six equal 
parts as number of interval should be even.

x    :  4     4.2   4.4   4.6   4.8  5.0  5.2
logx :  1.38  1.43  1.48  1.52  1.56 1.60 1.64

Now we can calculate approximate value of integral
using above formula:
     = h/3[( 1.38 + 1.64) + 4 * (1.43 + 1.52 + 
                      1.60 ) +2 *(1.48 + 1.56)]
     = 1.84
Hence the approximation of above integral is 
1.827 using Simpson's  rule.  
    // CPP program for simpson's  rule
#include <iostream>
#include <math.h>
using namespace std;

// Function to calculate f(x)
float func(float x)
{
	return log(x);
}

// Function for approximate integral
float simpsons_(float ll, float ul, int n)
{
	// Calculating the value of h
	float h = (ul - ll) / n;

	// Array for storing value of x and f(x)
	float x[10], fx[10];

	// Calculating values of x and f(x)
	for (int i = 0; i <= n; i++) {
		x[i] = ll + i * h;
		fx[i] = func(x[i]);
	}

	// Calculating result
	float res = 0;
	for (int i = 0; i <= n; i++) {
		if (i == 0 || i == n)
			res += fx[i];
		else if (i % 2 != 0)
			res += 4 * fx[i];
		else
			res += 2 * fx[i];
	}
	res = res * (h / 3);
	return res;
}

// Driver program
int main()
{
	float lower_limit = 4; // Lower limit
	float upper_limit = 5.2; // Upper limit
	int n = 6; // Number of interval
	cout << simpsons_(lower_limit, upper_limit, n);
	return 0;
}\end{verbatim}
This example is taken from geeksforgeeks.com 
\subsection*{Gaussian elimination}
We take input of an augmented matrix N*(N+1) for N unknowns.
\begin{verbatim}
    Given matrix represents following equations
3.0X1 + 2.0X2 - 4.0X3 =  3.0
2.0X1 + 3.0X2 + 3.0X3 = 15.0
5.0X1 - 3.0X2 +    X3 = 14.0
so we get the augmented matrix
mat[N][N+1] = {{3.0, 2.0,-4.0, 3.0},
                {2.0, 3.0, 3.0, 15.0},
                {5.0, -3, 1.0, 14.0}
               };
\end{verbatim}
Now we convert our matrix to row echelon form\\
This method was discussed thoroughly in second semester so I will not go in algorithm of this method.
\begin{verbatim}
    // C++ program to demonstrate working of Gaussian Elimination
// method
#include<bits/stdc++.h>
using namespace std;

#define N 3	 // Number of unknowns

// function to reduce matrix to r.e.f. Returns a value to
// indicate whether matrix is singular or not
int forwardElim(double mat[N][N+1]);

// function to calculate the values of the unknowns
void backSub(double mat[N][N+1]);

// function to get matrix content
void gaussianElimination(double mat[N][N+1])
{
	/* reduction into r.e.f. */
	int singular_flag = forwardElim(mat);

	/* if matrix is singular */
	if (singular_flag != -1)
	{
		printf("Singular Matrix.\n");

		/* if the RHS of equation corresponding to
		zero row is 0, * system has infinitely
		many solutions, else inconsistent*/
		if (mat[singular_flag][N])
			printf("Inconsistent System.");
		else
			printf("May have infinitely many "
				"solutions.");

		return;
	}

	/* get solution to system and print it using
	backward substitution */
	backSub(mat);
}

// function for elementary operation of swapping two rows
void swap_row(double mat[N][N+1], int i, int j)
{
	//printf("Swapped rows %d and %d\n", i, j);

	for (int k=0; k<=N; k++)
	{
		double temp = mat[i][k];
		mat[i][k] = mat[j][k];
		mat[j][k] = temp;
	}
}

// function to print matrix content at any stage
void print(double mat[N][N+1])
{
	for (int i=0; i<N; i++, printf("\n"))
		for (int j=0; j<=N; j++)
			printf("%lf ", mat[i][j]);

	printf("\n");
}

// function to reduce matrix to r.e.f.
int forwardElim(double mat[N][N+1])
{
	for (int k=0; k<N; k++)
	{
		// Initialize maximum value and index for pivot
		int i_max = k;
		int v_max = mat[i_max][k];

		/* find greater amplitude for pivot if any */
		for (int i = k+1; i < N; i++)
			if (abs(mat[i][k]) > v_max)
				v_max = mat[i][k], i_max = i;

		/* if a principal diagonal element is zero,
		* it denotes that matrix is singular, and
		* will lead to a division-by-zero later. */
		if (!mat[k][i_max])
			return k; // Matrix is singular

		/* Swap the greatest value row with current row */
		if (i_max != k)
			swap_row(mat, k, i_max);


		for (int i=k+1; i<N; i++)
		{
			/* factor f to set current row kth element to 0,
			* and subsequently remaining kth column to 0 */
			double f = mat[i][k]/mat[k][k];

			/* subtract fth multiple of corresponding kth
			row element*/
			for (int j=k+1; j<=N; j++)
				mat[i][j] -= mat[k][j]*f;

			/* filling lower triangular matrix with zeros*/
			mat[i][k] = 0;
		}

		//print(mat);	 //for matrix state
	}
	//print(mat);		 //for matrix state
	return -1;
}

// function to calculate the values of the unknowns
void backSub(double mat[N][N+1])
{
	double x[N]; // An array to store solution

	/* Start calculating from last equation up to the
	first */
	for (int i = N-1; i >= 0; i--)
	{
		/* start with the RHS of the equation */
		x[i] = mat[i][N];

		/* Initialize j to i+1 since matrix is upper
		triangular*/
		for (int j=i+1; j<N; j++)
		{
			/* subtract all the lhs values
			* except the coefficient of the variable
			* whose value is being calculated */
			x[i] -= mat[i][j]*x[j];
		}

		/* divide the RHS by the coefficient of the
		unknown being calculated */
		x[i] = x[i]/mat[i][i];
	}

	printf("\nSolution for the system:\n");
	for (int i=0; i<N; i++)
		printf("%lf\n", x[i]);
}

// Driver program
int main()
{
	/* input matrix */
	double mat[N][N+1] = {{3.0, 2.0,-4.0, 3.0},
						{2.0, 3.0, 3.0, 15.0},
						{5.0, -3, 1.0, 14.0}
						};

	gaussianElimination(mat);

	return 0;
}\end{verbatim} 
we get solutions as 1,2 and 3\\
\subsection*{Newton's divided difference formula}
We have already discussed the complete method we will take input as 7 and check out the output(13.47) on the polynomial interpolation.\\
\begin{verbatim}
    // CPP program for implementing
// Newton divided difference formula
#include <bits/stdc++.h>
using namespace std;

// Function to find the product term
float proterm(int i, float value, float x[])
{
	float pro = 1;
	for (int j = 0; j < i; j++) {
		pro = pro * (value - x[j]);
	}
	return pro;
}

// Function for calculating
// divided difference table
void dividedDiffTable(float x[], float y[][10], int n)
{
	for (int i = 1; i < n; i++) {
		for (int j = 0; j < n - i; j++) {
			y[j][i] = (y[j][i - 1] - y[j + 1]
						[i - 1]) / (x[j] - x[i + j]);
		}
	}
}

// Function for applying Newton's
// divided difference formula
float applyFormula(float value, float x[],
				float y[][10], int n)
{
	float sum = y[0][0];

	for (int i = 1; i < n; i++) {
	sum = sum + (proterm(i, value, x) * y[0][i]);
	}
	return sum;
}

// Function for displaying
// divided difference table
void printDiffTable(float y[][10],int n)
{
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n - i; j++) {
			cout << setprecision(4) <<
								y[i][j] << "\t ";
		}
		cout << "\n";
	}
}

// Driver Function
int main()
{
	// number of inputs given
	int n = 4;
	float value, sum, y[10][10];
	float x[] = { 5, 6, 9, 11 };

	// y[][] is used for divided difference
	// table where y[][0] is used for input
	y[0][0] = 12;
	y[1][0] = 13;
	y[2][0] = 14;
	y[3][0] = 16;

	// calculating divided difference table
	dividedDiffTable(x, y, n);

	// displaying divided difference table
	printDiffTable(y,n);

	// value to be interpolated
	value = 7;

	// printing the value
	cout << "\nValue at " << value << " is "
			<< applyFormula(value, x, y, n) << endl;
	return 0;
}
The table we get(similar to one in midterm report) is:
12     1     -0.1667     0.05     
13     0.3333     0.1333     
14     1     
16     
\end{verbatim}

\pagebreak
\section*{Numerical Analysis programming with Python}
Now coming to python , I had to spend couple of weeks in learning python , it was a great thing to learn. I got to learn about python in much details , I also learnt about python libraries like NumPy, Searborn, Matplotlib , Pandas etc. \\
In the last week of  course I learnt about numerical methods in python at much depth. The reference for this section is taken through First Semester in Numerical Analysis with Python by 
Yaning Liu
(Department of Mathematical and Statistical Sciences,
University of Colorado Denver) \\
I have briefly given the codes of the things I learnt and have discussed algorithm only if it was not previously discussed.\\
I have done the discussion related to python programming in Google colab python notebook , I will be providing github link to it in here \\
\section*{\href{https://github.com/KalkulatorHere/repo1/blob/main/Numerical_Analysis_End_Term.ipynb}{\textit{LINK FOR GOOGLE COLAB NOTEBOOK}}}





\pagebreak
In conclusion , numerical analysis was a very interesting topic to learn about , I got to explore lot of computational methods and algorithms.
The project's findings not only expand our understanding of numerical analysis but also emphasise how important it is to use the right techniques for particular problem domains.\\
As this research comes to a close, we acknowledge that numerical analysis is still a crucial topic in many fields, helping with simulations, optimisation, and the solution of challenging mathematical models.
Although we have done significant work in the field of numerical analysis, there's still a lot of scope to improvise the methods we use.\\
Ultimately , this project deepened my appreciation for science and technology , engineering and mathematics.







   
















\end{document}
